def tuning():
	global data_gx
	global data_gy
	global data_gz
	global Gyro
	global data_ax
	global data_ay
	global data_az
	global Accel
	global gx_os
	global gy_os
	global data_gz
	global gz_os
	global THROTTLE
	global pid_P_accel
	global pid_I_accel
	global pid_D_accel
	global pid_P_gyro
	global pid_I_gyro
	global pid_D_gyro
	global pwm
	
	def run_tuning():
		data_gx,data_gy,data_gz,t=Gyro.get() #degrees/sec
		data_ax,data_ay,data_az=Accel.get() #in G 
		data_gx,data_gy,data_gz=data_gx+gx_os,data_gy+gy_os,data_gz+gz_os
		data_ax,data_ay,data_az=data_ax+ax_os,data_ay+ay_os,data_az+az_os
		#update_set_points()
		MAX_SPEED=0

			gx.setPoint(gx_sp)
			gy.setPoint(gy_sp)
			gz.setPoint(gz_sp)
			ax.setPoint(ax_sp)
			ax.setPoint(ax_sp)
			ax.setPoint(ax_sp)
			
			data_gx,data_gy,data_gz,t=Gyro.get() #degrees/sec
			data_ax,data_ay,data_az=Accel.get() #in G 
			print "Accel: \n{} \n{} \n{} \nGyro: \n{} \n{} \n{}".format(data_ax,data_ay,data_az,data_gx,data_gy,data_gz)
				
			#quick run
			if 'r' in char:
				tune=1
				os.system("clear")
				print "running..."
				print "Throttle:5++ t+ h- n-- Enter=0  SPACE stop"
				THROTTLE=100
				LEDs=0
				pwm_br =150
				pwm_bl =150
				pwm_fl =150
				pwm_fr =150
				br_err=0
				bl_err = 0
				fl_err =0 
				fr_err = 0 
				
				print "Starting advanced current auto-balance algorithms..."
				time.sleep(.3)
				print "INITIALIZING: Motor 1, Back right"
				pwm.changeSpeed1(pwm_br)
				#time.sleep(.8)
				print "INITIALIZING: Motor 2, Front right"
				pwm.changeSpeed2(pwm_fr)
				#time.sleep(.8)	
				pwm.changeSpeed4(pwm_fl)
				print "INITIALIZING: Motor 3, Front left"
				time.sleep(.8)
				pwm.changeSpeed3(pwm_bl)
				print "INITIALIZING: Motor 4, Back left"
				print "All motors safetly initialized"
				time.sleep(.8)	
				
				MAX_SPEED=1500
					
				base_speed=180	
				print "MAX_SPEED  {}  \nTHROTTLE: {}  \nbr {} \nfr {} \nbl {} \nfl {}".format(MAX_SPEED,THROTTLE,pwm_br,pwm_fr,pwm_bl,pwm_fl)
				while tune:
					#os.system("clear")
					#print "running..."
					#print "Throttle:5++ t+ h- n-- MAX_SPEED: +10 p, +1 :, -10 / \nEnter=0  SPACE stop"
					"""
					print "MAX_SPEED  {}  \nTHROTTLE: {}  \nbr {} \nfr {} \nbl {} \nfl {}".format(MAX_SPEED,THROTTLE,pwm_br,pwm_fr,pwm_bl,pwm_fl)
					if br_err>0:
						print "ERROR, backright max speed error"
					if bl_err>0:
						print "ERROR, backleft max speed error"
					if fr_err>0:
						print "ERROR, frontright max speed error"
					if fl_err>0:
						print "ERROR, frontleft max speed error"
					"""
					data_gx,data_gy,data_gz,t=Gyro.get() #degrees/sec
					data_ax,data_ay,data_az=Accel.get() #in G 	
					data_gx,data_gy,data_gz=data_gx+gx_os,data_gy+gy_os,data_gz+gz_os
					data_ax,data_ay,data_az=data_ax+ax_os,data_ay+ay_os,data_az+az_os
					
					gx_up=gx.update(data_gx)
					gy_up=gy.update(data_gy)
					gz_up=gz.update(data_gz)
					ax_up=ax.update(data_ax)
					ay_up=ay.update(data_ay)
					az_up=az.update(data_az)
					
					#decide ratios
					pwm_br =base_speed+.5*THROTTLE+0*(-.3*gx_up-.3*gy_up-0*gz_up)  +12*(-.5*ax_up +.5* ay_up+0* az_up)
					pwm_bl =base_speed+.5*THROTTLE+0*(-.3*gx_up+.3*gy_up+0*gz_up)  +12*(+.5*ax_up +.5* ay_up+0* az_up)
					pwm_fl =base_speed+.5*THROTTLE+0*(+.3*gx_up+.3*gy_up-0*gz_up)  +12*(+.5*ax_up -.5* ay_up+0* az_up)
					pwm_fr =base_speed+.5*THROTTLE+0*(+.3*gx_up-.3*gy_up+0*gz_up)  +12*(-.5*ax_up -.5* ay_up+0* az_up)
						
					#errors
					br_err=0
					bl_err = 0
					fl_err =0 
					fr_err = 0 
					
						
					if pwm_br>MAX_SPEED:
						br_err=1
						pwm_br=MAX_SPEED
					if pwm_bl>MAX_SPEED:
						bl_err = 1						
						pwm_bl=MAX_SPEED
					if pwm_fl>MAX_SPEED:
						fl_err =1 
						pwm_fl=MAX_SPEED
					if pwm_fr>MAX_SPEED:
						fr_err = 1 
						pwm_fr=MAX_SPEED
					
					
					
					#update motors` 
					#P8_13 PWM Back Right	PWM1	
					#P8_19 PWM Front RIght	PWM2
					#P9_14 PWM Back Left	PWM3
					#P9_16 PWM Front Left	PWM4
					pwm.changeSpeed1(pwm_br)
				
					pwm.changeSpeed2(pwm_fr)
					
					pwm.changeSpeed3(pwm_bl)
					
					pwm.changeSpeed4(pwm_fl)
				
					
					if kbhit.kbhit()>0:
						char=kbhit.getch().lower()
						if ' ' in char:
							print "SIGNAL: user abort"
							THROTTLE=0
							tune=0
							pwm.stop()
							break 				
						if '\n' in char:
							THROTTLE =0
							
						if 't' in char:
							THROTTLE +=1
						if 'h' in char:
							THROTTLE -=1
						if '5' in char:
							THROTTLE +=1
						if 'n' in char:
							THROTTLE -=10
						if 'p' in char:
							MAX_SPEED+=10
						if ';' in char:
							MAX_SPEED+=1
						if '/' in char:
							MAX_SPEED-=10 
								
					if LEDs==0:
						led.back("0000")
						LEDs=1 
					else:
						led.back("1111")
						LEDs=0
			
			
	return #tuning
	
	
